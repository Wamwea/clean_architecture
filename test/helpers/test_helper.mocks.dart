// Mocks generated by Mockito 5.1.0 from annotations
// in clean_architecture/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:typed_data' as _i14;

import 'package:clean_architecture/data/data_sources/local_data_source.dart'
    as _i11;
import 'package:clean_architecture/data/data_sources/remote_data_source.dart'
    as _i10;
import 'package:clean_architecture/data/failures.dart' as _i8;
import 'package:clean_architecture/domain/entities/news_object.dart' as _i9;
import 'package:clean_architecture/domain/repositories/local_repository.dart'
    as _i15;
import 'package:clean_architecture/domain/repositories/news_repository.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i4;
import 'package:hive/hive.dart' as _i5;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i13;
import 'package:hive/src/box/default_key_comparator.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:webfeed/webfeed.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeRssFeed_1 extends _i1.Fake implements _i3.RssFeed {}

class _FakeBaseOptions_2 extends _i1.Fake implements _i4.BaseOptions {}

class _FakeHttpClientAdapter_3 extends _i1.Fake
    implements _i4.HttpClientAdapter {}

class _FakeTransformer_4 extends _i1.Fake implements _i4.Transformer {}

class _FakeInterceptors_5 extends _i1.Fake implements _i4.Interceptors {}

class _FakeResponse_6<T> extends _i1.Fake implements _i4.Response<T> {}

class _FakeBox_7<E> extends _i1.Fake implements _i5.Box<E> {}

class _FakeLazyBox_8<E> extends _i1.Fake implements _i5.LazyBox<E> {}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i6.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>> getNews(
          String? newsPath) =>
      (super.noSuchMethod(Invocation.method(#getNews, [newsPath]),
              returnValue:
                  Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i9.NewsObject>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i10.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.RssFeed> getNews(String? newsPath) =>
      (super.noSuchMethod(Invocation.method(#getNews, [newsPath]),
              returnValue: Future<_i3.RssFeed>.value(_FakeRssFeed_1()))
          as _i7.Future<_i3.RssFeed>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i4.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions_2()) as _i4.BaseOptions);
  @override
  set options(_i4.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i4.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter_3()) as _i4.HttpClientAdapter);
  @override
  set httpClientAdapter(_i4.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i4.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer_4()) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i4.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors_5()) as _i4.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i4.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> getUri<T>(Uri? uri,
          {_i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> headUri<T>(Uri? uri,
          {dynamic data, _i4.Options? options, _i4.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data, _i4.Options? options, _i4.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i4.Options? options,
          _i4.CancelToken? cancelToken,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i7.Future<_i4.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i4.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i4.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i4.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i4.Response<dynamic>>.value(
                  _FakeResponse_6<dynamic>()))
          as _i7.Future<_i4.Response<dynamic>>);
  @override
  _i7.Future<_i4.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i4.ProgressCallback? onReceiveProgress,
          _i4.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i4.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future<_i4.Response<dynamic>>.value(
                  _FakeResponse_6<dynamic>()))
          as _i7.Future<_i4.Response<dynamic>>);
  @override
  _i7.Future<_i4.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i4.CancelToken? cancelToken,
          _i4.Options? options,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i4.CancelToken? cancelToken,
          _i4.Options? options,
          _i4.ProgressCallback? onSendProgress,
          _i4.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> fetch<T>(_i4.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_6<T>()))
          as _i7.Future<_i4.Response<T>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i11.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Box<dynamic>> init() => (super.noSuchMethod(
          Invocation.method(#init, []),
          returnValue: Future<_i5.Box<dynamic>>.value(_FakeBox_7<dynamic>()))
      as _i7.Future<_i5.Box<dynamic>>);
  @override
  _i7.Future<dynamic> getValue(String? key) =>
      (super.noSuchMethod(Invocation.method(#getValue, [key]),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  _i7.Future<void> updateValue(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#updateValue, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setValue(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#setValue, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i5.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(String? path) =>
      super.noSuchMethod(Invocation.method(#init, [path]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.Box<E>> openBox<E>(String? name,
          {_i5.HiveCipher? encryptionCipher,
          _i5.KeyComparator? keyComparator = _i12.defaultKeyComparator,
          _i5.CompactionStrategy? compactionStrategy =
              _i13.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i14.Uint8List? bytes,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i5.Box<E>>.value(_FakeBox_7<E>()))
          as _i7.Future<_i5.Box<E>>);
  @override
  _i7.Future<_i5.LazyBox<E>> openLazyBox<E>(String? name,
          {_i5.HiveCipher? encryptionCipher,
          _i5.KeyComparator? keyComparator = _i12.defaultKeyComparator,
          _i5.CompactionStrategy? compactionStrategy =
              _i13.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i5.LazyBox<E>>.value(_FakeLazyBox_8<E>()))
          as _i7.Future<_i5.LazyBox<E>>);
  @override
  _i5.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox_7<E>()) as _i5.Box<E>);
  @override
  _i5.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox_8<E>()) as _i5.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i7.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteBoxFromDisk(String? name, {String? path}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteBoxFromDisk, [name], {#path: path}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i7.Future<bool> boxExists(String? name, {String? path}) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name], {#path: path}),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  void registerAdapter<T>(_i5.TypeAdapter<T>? adapter,
          {bool? internal = false, bool? override = false}) =>
      super.noSuchMethod(
          Invocation.method(#registerAdapter, [adapter],
              {#internal: internal, #override: override}),
          returnValueForMissingStub: null);
  @override
  bool isAdapterRegistered(int? typeId) =>
      (super.noSuchMethod(Invocation.method(#isAdapterRegistered, [typeId]),
          returnValue: false) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) =>
      super.noSuchMethod(Invocation.method(#ignoreTypeId, [typeId]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalRepository extends _i1.Mock implements _i15.LocalRepository {
  MockLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>> getSavedNews() =>
      (super.noSuchMethod(Invocation.method(#getSavedNews, []),
              returnValue:
                  Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i9.NewsObject>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i9.NewsObject>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> getTheme() =>
      (super.noSuchMethod(Invocation.method(#getTheme, []),
              returnValue: Future<_i2.Either<_i8.Failure, bool>>.value(
                  _FakeEither_0<_i8.Failure, bool>()))
          as _i7.Future<_i2.Either<_i8.Failure, bool>>);
  @override
  _i7.Future<bool> toggleTheme() =>
      (super.noSuchMethod(Invocation.method(#toggleTheme, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<void> deleteSavedNews() =>
      (super.noSuchMethod(Invocation.method(#deleteSavedNews, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> saveNewsArticle(_i9.NewsObject? article) =>
      (super.noSuchMethod(Invocation.method(#saveNewsArticle, [article]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}
